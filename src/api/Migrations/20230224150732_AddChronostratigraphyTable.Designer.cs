// <auto-generated />
using System;
using BDMS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BDMS.Migrations
{
    [DbContext(typeof(BdmsContext))]
    [Migration("20230224150732_AddChronostratigraphyTable")]
    partial class AddChronostratigraphyTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bdms")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BDMS.Models.Borehole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_bho");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("text")
                        .HasColumnName("alternate_name_bho");

                    b.Property<string>("Canton")
                        .HasColumnType("text")
                        .HasColumnName("canton_bho");

                    b.Property<int?>("ChronostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("chronostrat_id_cli");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country_bho");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_bho");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_bho");

                    b.Property<int?>("CuttingsId")
                        .HasColumnType("integer")
                        .HasColumnName("cuttings_id_cli");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_bho");

                    b.Property<DateOnly?>("DrillingDate")
                        .HasColumnType("date")
                        .HasColumnName("drilling_date_bho");

                    b.Property<double?>("DrillingDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("drilling_diameter_bho");

                    b.Property<int?>("DrillingMethodId")
                        .HasColumnType("integer")
                        .HasColumnName("drilling_method_id_cli");

                    b.Property<double?>("ElevationZ")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_z_bho");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry")
                        .HasColumnName("geom_bho");

                    b.Property<bool?>("HasGroundwater")
                        .HasColumnType("boolean")
                        .HasColumnName("groundwater_bho");

                    b.Property<int?>("HrsId")
                        .HasColumnType("integer")
                        .HasColumnName("hrs_id_cli");

                    b.Property<double?>("Inclination")
                        .HasColumnType("double precision")
                        .HasColumnName("inclination_bho");

                    b.Property<double?>("InclinationDirection")
                        .HasColumnType("double precision")
                        .HasColumnName("inclination_direction_bho");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("public_bho");

                    b.Property<int?>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id_cli");

                    b.Property<int?>("LithologyTopBedrockId")
                        .HasColumnType("integer")
                        .HasColumnName("lithology_top_bedrock_id_cli");

                    b.Property<int?>("LithostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithostrat_id_cli");

                    b.Property<double?>("LocationX")
                        .HasColumnType("double precision")
                        .HasColumnName("location_x_bho");

                    b.Property<double?>("LocationXLV03")
                        .HasColumnType("double precision")
                        .HasColumnName("location_x_lv03_bho");

                    b.Property<double?>("LocationY")
                        .HasColumnType("double precision")
                        .HasColumnName("location_y_bho");

                    b.Property<double?>("LocationYLV03")
                        .HasColumnType("double precision")
                        .HasColumnName("location_y_lv03_bho");

                    b.Property<DateTime?>("Locked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_bho");

                    b.Property<int?>("LockedById")
                        .HasColumnType("integer")
                        .HasColumnName("locked_by_bho");

                    b.Property<string>("Municipality")
                        .HasColumnType("text")
                        .HasColumnName("municipality_bho");

                    b.Property<string>("OriginalName")
                        .HasColumnType("text")
                        .HasColumnName("original_name_bho");

                    b.Property<int?>("OriginalReferenceSystem")
                        .HasColumnType("integer")
                        .HasColumnName("srs_id_cli");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text")
                        .HasColumnName("project_name_bho");

                    b.Property<int?>("PurposeId")
                        .HasColumnType("integer")
                        .HasColumnName("purpose_id_cli");

                    b.Property<int?>("QtDepthId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_depth_id_cli");

                    b.Property<int?>("QtElevationId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_elevation_id_cli");

                    b.Property<int?>("QtInclinationDirectionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_inclination_direction_id_cli");

                    b.Property<int?>("LocationPrecisionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_location_id_cli");

                    b.Property<int?>("QtReferenceElevationId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_reference_elevation_id_cli");

                    b.Property<int?>("QtTopBedrockId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_top_bedrock_id_cli");

                    b.Property<int?>("QtTopBedrockTvdId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_top_bedrock_tvd_id_cli");

                    b.Property<int?>("QtTotalDepthTvdId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_total_depth_tvd_id_cli");

                    b.Property<double?>("ReferenceElevation")
                        .HasColumnType("double precision")
                        .HasColumnName("reference_elevation_bho");

                    b.Property<int?>("ReferenceElevationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_elevation_type_id_cli");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks_bho");

                    b.Property<int?>("RestrictionId")
                        .HasColumnType("integer")
                        .HasColumnName("restriction_id_cli");

                    b.Property<DateOnly?>("RestrictionUntil")
                        .HasColumnType("date")
                        .HasColumnName("restriction_until_bho");

                    b.Property<DateOnly?>("SpudDate")
                        .HasColumnType("date")
                        .HasColumnName("spud_date_bho");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id_cli");

                    b.Property<double?>("TopBedrock")
                        .HasColumnType("double precision")
                        .HasColumnName("top_bedrock_bho");

                    b.Property<double?>("TopBedrockTvd")
                        .HasColumnType("double precision")
                        .HasColumnName("top_bedrock_tvd_bho");

                    b.Property<double?>("TotalDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("total_depth_bho");

                    b.Property<double?>("TotalDepthTvd")
                        .HasColumnType("double precision")
                        .HasColumnName("total_depth_tvd_bho");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_bho");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_bho");

                    b.Property<int?>("WorkgroupId")
                        .HasColumnType("integer")
                        .HasColumnName("id_wgp_fk");

                    b.HasKey("Id");

                    b.HasIndex("ChronostratigraphyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CuttingsId");

                    b.HasIndex("DrillingMethodId");

                    b.HasIndex("HrsId");

                    b.HasIndex("KindId");

                    b.HasIndex("LithologyTopBedrockId");

                    b.HasIndex("LithostratigraphyId");

                    b.HasIndex("LockedById");

                    b.HasIndex("PurposeId");

                    b.HasIndex("QtDepthId");

                    b.HasIndex("QtElevationId");

                    b.HasIndex("QtInclinationDirectionId");

                    b.HasIndex("LocationPrecisionId");

                    b.HasIndex("QtReferenceElevationId");

                    b.HasIndex("QtTopBedrockId");

                    b.HasIndex("QtTopBedrockTvdId");

                    b.HasIndex("QtTotalDepthTvdId");

                    b.HasIndex("ReferenceElevationTypeId");

                    b.HasIndex("RestrictionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WorkgroupId");

                    b.ToTable("borehole", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeFile", b =>
                {
                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_bho_fk");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("id_fil_fk");

                    b.Property<DateTime?>("Attached")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("attached_bfi");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_bfi");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_bfi");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description_bfi");

                    b.Property<bool?>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public_bfi");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_bfi");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater_bfi");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.HasKey("BoreholeId", "FileId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FileId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("borehole_files", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.ChronostratigraphyLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_chr");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChronostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("chronostratigraphy_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("boolean")
                        .HasColumnName("is_last");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("ChronostratigraphyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("chronostratigraphy", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Codelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_cli");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_cli");

                    b.Property<string>("Conf")
                        .HasColumnType("text")
                        .HasColumnName("conf_cli");

                    b.Property<string>("De")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_de");

                    b.Property<string>("DescriptionDe")
                        .HasColumnType("text")
                        .HasColumnName("description_cli_de");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description_cli_en");

                    b.Property<string>("DescriptionFr")
                        .HasColumnType("text")
                        .HasColumnName("description_cli_fr");

                    b.Property<string>("DescriptionIt")
                        .HasColumnType("text")
                        .HasColumnName("description_cli_it");

                    b.Property<string>("DescriptionRo")
                        .HasColumnType("text")
                        .HasColumnName("description_cli_ro");

                    b.Property<string>("En")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_cli_en");

                    b.Property<string>("Fr")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_fr");

                    b.Property<int?>("Geolcode")
                        .HasColumnType("integer")
                        .HasColumnName("geolcode");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("default_cli");

                    b.Property<string>("It")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_it");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order_cli");

                    b.Property<string>("Ro")
                        .HasColumnType("text")
                        .HasColumnName("text_cli_ro");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema_cli");

                    b.HasKey("Id");

                    b.ToTable("codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Config", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name_cfg");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value_cfg");

                    b.HasKey("Name");

                    b.ToTable("config", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_cnt");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_cnt");

                    b.Property<DateTime?>("Expired")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_cnt");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("draft_cnt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_cnt");

                    b.Property<string>("TextDe")
                        .HasColumnType("text")
                        .HasColumnName("text_cnt_de");

                    b.Property<string>("TextEn")
                        .HasColumnType("text")
                        .HasColumnName("text_cnt_en");

                    b.Property<string>("TextFr")
                        .HasColumnType("text")
                        .HasColumnName("text_cnt_fr");

                    b.Property<string>("TextIt")
                        .HasColumnType("text")
                        .HasColumnName("text_cnt_it");

                    b.Property<string>("TextRo")
                        .HasColumnType("text")
                        .HasColumnName("text_cnt_ro");

                    b.Property<string>("TitelRo")
                        .HasColumnType("text")
                        .HasColumnName("title_cnt_ro");

                    b.Property<string>("TitleDe")
                        .HasColumnType("text")
                        .HasColumnName("title_cnt_de");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text")
                        .HasColumnName("title_cnt_en");

                    b.Property<string>("TitleFr")
                        .HasColumnType("text")
                        .HasColumnName("title_cnt_fr");

                    b.Property<string>("TitleIt")
                        .HasColumnType("text")
                        .HasColumnName("title_cnt_it");

                    b.HasKey("Id");

                    b.ToTable("contents", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.FaciesDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_fac");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("boolean")
                        .HasColumnName("is_last");

                    b.Property<int?>("QtDescriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_description_id");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QtDescriptionId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("facies_description", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_feb");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_feb");

                    b.Property<bool?>("IsFrw")
                        .HasColumnType("boolean")
                        .HasColumnName("frw_feb");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message_feb");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag_feb");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_feb");

                    b.HasKey("Id");

                    b.ToTable("feedbacks", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_fil");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_fil");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash_fil");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_fil");

                    b.Property<string>("NameUuid")
                        .HasColumnType("text")
                        .HasColumnName("name_uuid_fil");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_fil");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_fil");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_fil");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("files", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_lay");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlterationId")
                        .HasColumnType("integer")
                        .HasColumnName("alteration_id_cli");

                    b.Property<string>("Casing")
                        .HasColumnType("text")
                        .HasColumnName("casng_id");

                    b.Property<DateOnly?>("CasingDateFinish")
                        .HasColumnType("date")
                        .HasColumnName("casng_date_finish_lay");

                    b.Property<DateOnly?>("CasingDateSpud")
                        .HasColumnType("date")
                        .HasColumnName("casng_date_spud_lay");

                    b.Property<double?>("CasingInnerDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("casng_inner_diameter_lay");

                    b.Property<int?>("CasingKindId")
                        .HasColumnType("integer")
                        .HasColumnName("casng_kind_id_cli");

                    b.Property<int?>("CasingMaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("casng_material_id_cli");

                    b.Property<double?>("CasingOuterDiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("casng_outer_diameter_lay");

                    b.Property<int?>("ChronostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("chronostratigraphy_id_cli");

                    b.Property<int?>("CohesionId")
                        .HasColumnType("integer")
                        .HasColumnName("cohesion_id_cli");

                    b.Property<int?>("CompactnessId")
                        .HasColumnType("integer")
                        .HasColumnName("compactness_id_cli");

                    b.Property<int?>("ConsistanceId")
                        .HasColumnType("integer")
                        .HasColumnName("consistance_id_cli");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_lay");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator_lay");

                    b.Property<string>("DescriptionFacies")
                        .HasColumnType("text")
                        .HasColumnName("facies_description_lay");

                    b.Property<string>("DescriptionLithological")
                        .HasColumnType("text")
                        .HasColumnName("lithological_description_lay");

                    b.Property<int?>("FillKindId")
                        .HasColumnType("integer")
                        .HasColumnName("fill_kind_id_cli");

                    b.Property<int?>("FillMaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("fill_material_id_cli");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from_lay");

                    b.Property<int?>("GradationId")
                        .HasColumnType("integer")
                        .HasColumnName("gradation_id_cli");

                    b.Property<int?>("GrainSize1Id")
                        .HasColumnType("integer")
                        .HasColumnName("grain_size_1_id_cli");

                    b.Property<int?>("GrainSize2Id")
                        .HasColumnType("integer")
                        .HasColumnName("grain_size_2_id_cli");

                    b.Property<int?>("HumidityId")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_id_cli");

                    b.Property<string>("Instrument")
                        .HasColumnType("text")
                        .HasColumnName("instr_id");

                    b.Property<int?>("InstrumentCasingId")
                        .HasColumnType("integer")
                        .HasColumnName("instr_id_sty_fk");

                    b.Property<int?>("InstrumentCasingLayerId")
                        .HasColumnType("integer")
                        .HasColumnName("instr_id_lay_fk");

                    b.Property<int?>("InstrumentKindId")
                        .HasColumnType("integer")
                        .HasColumnName("instr_kind_id_cli");

                    b.Property<int?>("InstrumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("instr_status_id_cli");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("boolean")
                        .HasColumnName("last_lay");

                    b.Property<bool?>("IsStriae")
                        .HasColumnType("boolean")
                        .HasColumnName("striae_lay");

                    b.Property<bool?>("IsUndefined")
                        .HasColumnType("boolean")
                        .HasColumnName("undefined_lay");

                    b.Property<int?>("LithologyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithology_id_cli");

                    b.Property<int?>("LithologyTopBedrockId")
                        .HasColumnType("integer")
                        .HasColumnName("lithology_top_bedrock_id_cli");

                    b.Property<int?>("LithostratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("lithostratigraphy_id_cli");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes_lay");

                    b.Property<string>("OriginalLithology")
                        .HasColumnType("text")
                        .HasColumnName("original_lithology");

                    b.Property<string>("OriginalUscs")
                        .HasColumnType("text")
                        .HasColumnName("uscs_original_lay");

                    b.Property<int?>("PlasticityId")
                        .HasColumnType("integer")
                        .HasColumnName("plasticity_id_cli");

                    b.Property<int?>("QtDescriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_description_id_cli");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to_lay");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_lay");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater_lay");

                    b.Property<int?>("Uscs1Id")
                        .HasColumnType("integer")
                        .HasColumnName("uscs_1_id_cli");

                    b.Property<int?>("Uscs2Id")
                        .HasColumnType("integer")
                        .HasColumnName("uscs_2_id_cli");

                    b.Property<int?>("UscsDeterminationId")
                        .HasColumnType("integer")
                        .HasColumnName("uscs_determination_id_cli");

                    b.HasKey("Id");

                    b.HasIndex("AlterationId");

                    b.HasIndex("CasingKindId");

                    b.HasIndex("CasingMaterialId");

                    b.HasIndex("ChronostratigraphyId");

                    b.HasIndex("CohesionId");

                    b.HasIndex("CompactnessId");

                    b.HasIndex("ConsistanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FillKindId");

                    b.HasIndex("FillMaterialId");

                    b.HasIndex("GradationId");

                    b.HasIndex("GrainSize1Id");

                    b.HasIndex("GrainSize2Id");

                    b.HasIndex("HumidityId");

                    b.HasIndex("InstrumentCasingId");

                    b.HasIndex("InstrumentKindId");

                    b.HasIndex("InstrumentStatusId");

                    b.HasIndex("LithologyId");

                    b.HasIndex("LithologyTopBedrockId");

                    b.HasIndex("LithostratigraphyId");

                    b.HasIndex("PlasticityId");

                    b.HasIndex("QtDescriptionId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Uscs1Id");

                    b.HasIndex("Uscs2Id");

                    b.HasIndex("UscsDeterminationId");

                    b.ToTable("layer", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LayerCodelist", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("id_lay_fk");

                    b.Property<int>("CodelistId")
                        .HasColumnType("integer")
                        .HasColumnName("id_cli_fk");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_cli");

                    b.HasKey("LayerId", "CodelistId");

                    b.HasIndex("CodelistId");

                    b.ToTable("layer_codelist", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.LithologicalDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ldp");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("FromDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_from");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("boolean")
                        .HasColumnName("is_last");

                    b.Property<int?>("QtDescriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("qt_description_id");

                    b.Property<int>("StratigraphyId")
                        .HasColumnType("integer")
                        .HasColumnName("id_sty_fk");

                    b.Property<double?>("ToDepth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth_to");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QtDescriptionId");

                    b.HasIndex("StratigraphyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("lithological_description", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Stratigraphy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_sty");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_bho_fk");

                    b.Property<string>("Casing")
                        .HasColumnType("text")
                        .HasColumnName("casng_id");

                    b.Property<DateOnly?>("CasingDate")
                        .HasColumnType("date")
                        .HasColumnName("casng_date_abd_sty");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_sty");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("author_sty");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date_sty");

                    b.Property<int?>("FillCasingId")
                        .HasColumnType("integer")
                        .HasColumnName("fill_casng_id_sty_fk");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("primary_sty");

                    b.Property<int>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id_cli");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name_sty");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes_sty");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_sty");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updater_sty");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FillCasingId");

                    b.HasIndex("KindId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("stratigraphy", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_tes");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_tes");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_tes");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("draft_tes");

                    b.Property<string>("TextDe")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_de");

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_tes_en");

                    b.Property<string>("TextFr")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_fr");

                    b.Property<string>("TextIt")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_it");

                    b.Property<string>("TextRo")
                        .HasColumnType("text")
                        .HasColumnName("text_tes_ro");

                    b.HasKey("Id");

                    b.ToTable("terms", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_usr");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disabled_usr");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_usr");

                    b.Property<bool>("IsViewer")
                        .HasColumnType("boolean")
                        .HasColumnName("viewer_usr");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_evs");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_evs");

                    b.Property<string>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload_evs");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topic_evs");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("events", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.UserWorkgroupRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.Property<int>("WorkgroupId")
                        .HasColumnType("integer")
                        .HasColumnName("id_wgp_fk");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("id_rol_fk");

                    b.HasKey("UserId", "WorkgroupId", "Role");

                    b.ToTable("users_roles", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wkf");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoreholeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_bho_fk");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_wkf");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes_wkf");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("id_rol_fk");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_wkf");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("id_usr_fk");

                    b.HasKey("Id");

                    b.HasIndex("BoreholeId");

                    b.HasIndex("UserId");

                    b.ToTable("workflow", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Workgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wgp");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_wgp");

                    b.Property<DateTime?>("Disabled")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disabled_wgp");

                    b.Property<bool?>("IsSupplier")
                        .HasColumnType("boolean")
                        .HasColumnName("supplier_wgp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_wgp");

                    b.Property<string>("Settings")
                        .HasColumnType("json")
                        .HasColumnName("settings_wgp");

                    b.HasKey("Id");

                    b.ToTable("workgroups", "bdms");
                });

            modelBuilder.Entity("BDMS.Models.Borehole", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Chronostratigraphy")
                        .WithMany()
                        .HasForeignKey("ChronostratigraphyId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "Cuttings")
                        .WithMany()
                        .HasForeignKey("CuttingsId");

                    b.HasOne("BDMS.Models.Codelist", "DrillingMethod")
                        .WithMany()
                        .HasForeignKey("DrillingMethodId");

                    b.HasOne("BDMS.Models.Codelist", "Hrs")
                        .WithMany()
                        .HasForeignKey("HrsId");

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId");

                    b.HasOne("BDMS.Models.Codelist", "LithologyTopBedrock")
                        .WithMany()
                        .HasForeignKey("LithologyTopBedrockId");

                    b.HasOne("BDMS.Models.Codelist", "Lithostratigraphy")
                        .WithMany()
                        .HasForeignKey("LithostratigraphyId");

                    b.HasOne("BDMS.Models.User", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");

                    b.HasOne("BDMS.Models.Codelist", "Purpose")
                        .WithMany()
                        .HasForeignKey("PurposeId");

                    b.HasOne("BDMS.Models.Codelist", "QtDepth")
                        .WithMany()
                        .HasForeignKey("QtDepthId");

                    b.HasOne("BDMS.Models.Codelist", "QtElevation")
                        .WithMany()
                        .HasForeignKey("QtElevationId");

                    b.HasOne("BDMS.Models.Codelist", "QtInclinationDirection")
                        .WithMany()
                        .HasForeignKey("QtInclinationDirectionId");

                    b.HasOne("BDMS.Models.Codelist", "LocationPrecision")
                        .WithMany()
                        .HasForeignKey("LocationPrecisionId");

                    b.HasOne("BDMS.Models.Codelist", "QtReferenceElevation")
                        .WithMany()
                        .HasForeignKey("QtReferenceElevationId");

                    b.HasOne("BDMS.Models.Codelist", "QtTopBedrock")
                        .WithMany()
                        .HasForeignKey("QtTopBedrockId");

                    b.HasOne("BDMS.Models.Codelist", "QtTopBedrockTvd")
                        .WithMany()
                        .HasForeignKey("QtTopBedrockTvdId");

                    b.HasOne("BDMS.Models.Codelist", "QtTotalDepthTvd")
                        .WithMany()
                        .HasForeignKey("QtTotalDepthTvdId");

                    b.HasOne("BDMS.Models.Codelist", "ReferenceElevationType")
                        .WithMany()
                        .HasForeignKey("ReferenceElevationTypeId");

                    b.HasOne("BDMS.Models.Codelist", "Restriction")
                        .WithMany()
                        .HasForeignKey("RestrictionId");

                    b.HasOne("BDMS.Models.Codelist", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BDMS.Models.Workgroup", "Workgroup")
                        .WithMany("Boreholes")
                        .HasForeignKey("WorkgroupId");

                    b.Navigation("Chronostratigraphy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Cuttings");

                    b.Navigation("DrillingMethod");

                    b.Navigation("Hrs");

                    b.Navigation("Kind");

                    b.Navigation("LithologyTopBedrock");

                    b.Navigation("Lithostratigraphy");

                    b.Navigation("LockedBy");

                    b.Navigation("Purpose");

                    b.Navigation("QtDepth");

                    b.Navigation("QtElevation");

                    b.Navigation("QtInclinationDirection");

                    b.Navigation("LocationPrecision");

                    b.Navigation("QtReferenceElevation");

                    b.Navigation("QtTopBedrock");

                    b.Navigation("QtTopBedrockTvd");

                    b.Navigation("QtTotalDepthTvd");

                    b.Navigation("ReferenceElevationType");

                    b.Navigation("Restriction");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Workgroup");
                });

            modelBuilder.Entity("BDMS.Models.BoreholeFile", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("BoreholeFiles")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.File", "File")
                        .WithMany("BoreholeFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BDMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Borehole");

                    b.Navigation("CreatedBy");

                    b.Navigation("File");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BDMS.Models.ChronostratigraphyLayer", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Chronostratigraphy")
                        .WithMany()
                        .HasForeignKey("ChronostratigraphyId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("Chronostratigraphies")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Chronostratigraphy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.FaciesDescription", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "QtDescription")
                        .WithMany()
                        .HasForeignKey("QtDescriptionId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("FaciesDescriptions")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("QtDescription");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.File", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Layer", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Alteration")
                        .WithMany()
                        .HasForeignKey("AlterationId");

                    b.HasOne("BDMS.Models.Codelist", "CasingKind")
                        .WithMany()
                        .HasForeignKey("CasingKindId");

                    b.HasOne("BDMS.Models.Codelist", "CasingMaterial")
                        .WithMany()
                        .HasForeignKey("CasingMaterialId");

                    b.HasOne("BDMS.Models.Codelist", "Chronostratigraphy")
                        .WithMany()
                        .HasForeignKey("ChronostratigraphyId");

                    b.HasOne("BDMS.Models.Codelist", "Cohesion")
                        .WithMany()
                        .HasForeignKey("CohesionId");

                    b.HasOne("BDMS.Models.Codelist", "Compactness")
                        .WithMany()
                        .HasForeignKey("CompactnessId");

                    b.HasOne("BDMS.Models.Codelist", "Consistance")
                        .WithMany()
                        .HasForeignKey("ConsistanceId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "FillKind")
                        .WithMany()
                        .HasForeignKey("FillKindId");

                    b.HasOne("BDMS.Models.Codelist", "FillMaterial")
                        .WithMany()
                        .HasForeignKey("FillMaterialId");

                    b.HasOne("BDMS.Models.Codelist", "Gradation")
                        .WithMany()
                        .HasForeignKey("GradationId");

                    b.HasOne("BDMS.Models.Codelist", "GrainSize1")
                        .WithMany()
                        .HasForeignKey("GrainSize1Id");

                    b.HasOne("BDMS.Models.Codelist", "GrainSize2")
                        .WithMany()
                        .HasForeignKey("GrainSize2Id");

                    b.HasOne("BDMS.Models.Codelist", "Humidity")
                        .WithMany()
                        .HasForeignKey("HumidityId");

                    b.HasOne("BDMS.Models.Stratigraphy", "InstrumentCasing")
                        .WithMany()
                        .HasForeignKey("InstrumentCasingId");

                    b.HasOne("BDMS.Models.Codelist", "InstrumentKind")
                        .WithMany()
                        .HasForeignKey("InstrumentKindId");

                    b.HasOne("BDMS.Models.Codelist", "InstrumentStatus")
                        .WithMany()
                        .HasForeignKey("InstrumentStatusId");

                    b.HasOne("BDMS.Models.Codelist", "Lithology")
                        .WithMany()
                        .HasForeignKey("LithologyId");

                    b.HasOne("BDMS.Models.Codelist", "LithologyTopBedrock")
                        .WithMany()
                        .HasForeignKey("LithologyTopBedrockId");

                    b.HasOne("BDMS.Models.Codelist", "Lithostratigraphy")
                        .WithMany()
                        .HasForeignKey("LithostratigraphyId");

                    b.HasOne("BDMS.Models.Codelist", "Plasticity")
                        .WithMany()
                        .HasForeignKey("PlasticityId");

                    b.HasOne("BDMS.Models.Codelist", "QtDescription")
                        .WithMany()
                        .HasForeignKey("QtDescriptionId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("Layers")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BDMS.Models.Codelist", "Uscs1")
                        .WithMany()
                        .HasForeignKey("Uscs1Id");

                    b.HasOne("BDMS.Models.Codelist", "Uscs2")
                        .WithMany()
                        .HasForeignKey("Uscs2Id");

                    b.HasOne("BDMS.Models.Codelist", "UscsDetermination")
                        .WithMany()
                        .HasForeignKey("UscsDeterminationId");

                    b.Navigation("Alteration");

                    b.Navigation("CasingKind");

                    b.Navigation("CasingMaterial");

                    b.Navigation("Chronostratigraphy");

                    b.Navigation("Cohesion");

                    b.Navigation("Compactness");

                    b.Navigation("Consistance");

                    b.Navigation("CreatedBy");

                    b.Navigation("FillKind");

                    b.Navigation("FillMaterial");

                    b.Navigation("Gradation");

                    b.Navigation("GrainSize1");

                    b.Navigation("GrainSize2");

                    b.Navigation("Humidity");

                    b.Navigation("InstrumentCasing");

                    b.Navigation("InstrumentKind");

                    b.Navigation("InstrumentStatus");

                    b.Navigation("Lithology");

                    b.Navigation("LithologyTopBedrock");

                    b.Navigation("Lithostratigraphy");

                    b.Navigation("Plasticity");

                    b.Navigation("QtDescription");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Uscs1");

                    b.Navigation("Uscs2");

                    b.Navigation("UscsDetermination");
                });

            modelBuilder.Entity("BDMS.Models.LayerCodelist", b =>
                {
                    b.HasOne("BDMS.Models.Codelist", "Codelist")
                        .WithMany("LayerCodelists")
                        .HasForeignKey("CodelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Layer", "Layer")
                        .WithMany("LayerCodelists")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codelist");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("BDMS.Models.LithologicalDescription", b =>
                {
                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Codelist", "QtDescription")
                        .WithMany()
                        .HasForeignKey("QtDescriptionId");

                    b.HasOne("BDMS.Models.Stratigraphy", "Stratigraphy")
                        .WithMany("LithologicalDescriptions")
                        .HasForeignKey("StratigraphyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("QtDescription");

                    b.Navigation("Stratigraphy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.Stratigraphy", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Stratigraphies")
                        .HasForeignKey("BoreholeId");

                    b.HasOne("BDMS.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BDMS.Models.Stratigraphy", "FillCasing")
                        .WithMany()
                        .HasForeignKey("FillCasingId");

                    b.HasOne("BDMS.Models.Codelist", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Borehole");

                    b.Navigation("CreatedBy");

                    b.Navigation("FillCasing");

                    b.Navigation("Kind");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BDMS.Models.UserEvent", b =>
                {
                    b.HasOne("BDMS.Models.User", "User")
                        .WithMany("BoringEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BDMS.Models.UserWorkgroupRole", b =>
                {
                    b.HasOne("BDMS.Models.User", null)
                        .WithMany("WorkgroupRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BDMS.Models.Workflow", b =>
                {
                    b.HasOne("BDMS.Models.Borehole", "Borehole")
                        .WithMany("Workflows")
                        .HasForeignKey("BoreholeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borehole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BDMS.Models.Borehole", b =>
                {
                    b.Navigation("BoreholeFiles");

                    b.Navigation("Stratigraphies");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("BDMS.Models.Codelist", b =>
                {
                    b.Navigation("LayerCodelists");
                });

            modelBuilder.Entity("BDMS.Models.File", b =>
                {
                    b.Navigation("BoreholeFiles");
                });

            modelBuilder.Entity("BDMS.Models.Layer", b =>
                {
                    b.Navigation("LayerCodelists");
                });

            modelBuilder.Entity("BDMS.Models.Stratigraphy", b =>
                {
                    b.Navigation("Chronostratigraphies");

                    b.Navigation("FaciesDescriptions");

                    b.Navigation("Layers");

                    b.Navigation("LithologicalDescriptions");
                });

            modelBuilder.Entity("BDMS.Models.User", b =>
                {
                    b.Navigation("BoringEvents");

                    b.Navigation("WorkgroupRoles");
                });

            modelBuilder.Entity("BDMS.Models.Workgroup", b =>
                {
                    b.Navigation("Boreholes");
                });
#pragma warning restore 612, 618
        }
    }
}
